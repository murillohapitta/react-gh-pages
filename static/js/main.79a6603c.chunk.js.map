{"version":3,"sources":["Conteiners/Home.js","Conteiners/files/logo-stickrun.png","Conteiners/files/stick-run-1.png","Conteiners/files/stick-run-2.png","Conteiners/Projetos.js","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","root","backgroundColor","height","postItem","color","padding","textAlign","postData","fontStyle","Home","classes","Container","maxWidth","className","Box","Grid","container","spacing","justifyContent","item","xs","Paper","SimpleDialog","props","onClose","selectedValue","open","Dialog","DialogTitle","disableTypography","dialogTitle","Typography","variant","IconButton","closeButton","onClick","DialogContent","scroll","dialogItem","class","src","stickImgFirst","aspectRatio","cover","stickImgSecond","itemCard","width","itemImage","position","right","top","palette","grey","Projetos","React","useState","setOpen","setSelectedValue","conteiner","Card","CardActionArea","CardMedia","image","stickLogo","title","CardContent","gutterBottom","component","value","TabPanel","children","index","other","role","hidden","id","p","a11yProps","titleFont","fontWeight","fontSize","darkTheme","createTheme","type","primary","main","secondary","FullWidthTabs","useTheme","setValue","ThemeProvider","AppBar","Tabs","onChange","event","newValue","indicatorColor","textColor","centered","Tab","label","axis","direction","onChangeIndex","dir","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.79a6603c.chunk.js","sourcesContent":["import { Box, Container, Grid, makeStyles, Paper } from \"@material-ui/core\"\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      backgroundColor: '#37474f',\r\n      height: '100vh',\r\n    },\r\n    postItem: {\r\n        color: 'white',\r\n        padding: 50,\r\n        backgroundColor: '#263238',\r\n        textAlign: \"center\",\r\n    },\r\n    postData: {\r\n        color: '#718792',\r\n        textAlign: \"end\",\r\n        fontStyle: 'italic',\r\n    },\r\n  }));\r\n\r\nexport default function Home() {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Container maxWidth=\"lg\" className={classes.root}>\r\n            <Box height={50}/>\r\n            <Grid container spacing={3} justifyContent='center'>\r\n                <Grid item xs={12}>\r\n                    <Paper className={classes.postItem}> \r\n                        <h2>Sobre</h2>\r\n\r\n                        <p>O objetivo do site é conciliar todo o conhecimento e experiência adquirida durante minha carreira como programador.</p>\r\n                        <p>Principalmente meus projetos em HTML e CSS, mas também em Java Script e qualquer outra linguagem que estiver estudando.</p>\r\n                        <p>Atualmente estou cursando Análise e desenvolvimento de sistema, mas também tenho interesse em aprender e estudar sozinho, além de fazer cursos a parte através da Alura, também faço pesquisas e aprendo coisas de meu interesse pela internet e afins.</p>\r\n                        <p>Já fiz muitos projetos de vários tipos: Arduino, Jogos, Sites. Além de aprender várias linguagens diferentes:  C, C++, Java, Java Script, Python, HTML, CSS. E pretendo não parar por aqui.</p>\r\n\r\n                        <p className={classes.postData}>Post Principal - 01/07/2021</p>\r\n                    </Paper>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                        <Paper className={classes.postItem}>\r\n                            <h2>Exemplo post</h2>\r\n\r\n                            <p>Exemplo descrição</p>\r\n\r\n                            <p className={classes.postData}>data</p>\r\n                        </Paper>\r\n                </Grid>\r\n                \r\n            </Grid>\r\n        </Container>\r\n    )\r\n}","export default __webpack_public_path__ + \"static/media/logo-stickrun.84a5e0f1.png\";","export default __webpack_public_path__ + \"static/media/stick-run-1.2e93ec08.png\";","export default __webpack_public_path__ + \"static/media/stick-run-2.c9053dfb.png\";","import { Box, Card, CardActionArea, CardContent, CardMedia, Container, Dialog, Grid, IconButton, makeStyles, Typography, DialogTitle, DialogContent } from \"@material-ui/core\"\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Image from 'material-ui-image'\r\nimport React from \"react\";\r\nimport stickLogo from './files/logo-stickrun.png'\r\nimport stickImgFirst from './files/stick-run-1.png'\r\nimport stickImgSecond from './files/stick-run-2.png'\r\n\r\nfunction SimpleDialog(props) {\r\n    const classes = useStyles();\r\n    const { onClose, selectedValue, open } = props;\r\n  \r\n    const handleClose = () => {\r\n      onClose(selectedValue);\r\n    };\r\n    \r\n    return (\r\n        <Dialog onClose={handleClose} open={open} maxWidth=\"md\" >\r\n            <DialogTitle disableTypography className={classes.dialogTitle}>\r\n            <Typography variant=\"h6\">Stick Run</Typography>\r\n            {onClose ? (\r\n                <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\r\n                <CloseIcon />\r\n            </IconButton>\r\n            ) : null}\r\n            </DialogTitle>\r\n            <DialogContent scroll='paper' className={classes.dialogItem}>\r\n                <p class=\"texto\">Stick Run é um projeto que criei quando queria aprender mais sobre desenvolvimento de jogos e C#, foi criado usando Unity e praticamente todo o conhecimento que precisei foi tirado da internet e da documentação da Unity.</p>\r\n                <Image \r\n                    src={stickImgFirst}\r\n                    color=\"black\"\r\n                    aspectRatio=\"1/2.2\"\r\n                    cover=\"true\"\r\n                />\r\n                <p class=\"imagem-desc\">Imagem de uma das primeiras versões</p>\r\n                <p class=\"texto\">O jogo é baseado no famoso jogo do dinossauro do navegador Chrome. O projeto inicial foi simples, mas conforme o desenvolvimento foi avançando, decidi adicionar mais e mais elementos ao jogo.</p>\r\n                <p class=\"texto\">Como foi um dos meus primeiros jogos que criei, e não tinha muita experiencia, o código era bem simples e “feio”, o projeto atual já está totalmente funcional e é possível jogar normalmente, a arte do jogo está simples, porém suficiente.</p>\r\n                <Image \r\n                    src={stickImgSecond}\r\n                    color=\"black\"\r\n                    aspectRatio=\"1/1.8\"\r\n                    cover=\"true\"\r\n                />\r\n                <p class=\"imagem-desc\">Imagem da versão atual</p>\r\n                <p class=\"texto\">Ainda gostaria de retornar ao projeto e melhorar mais ainda, adicionando novas mecânicas e elementos ao jogo, refazer as artes, animações, física e etc. Mas no momento estou focado em aprender novas linguagens.</p>\r\n                <p class=\"texto\">Caso queira jogar a versão atual, ela está disponivel no botão abaixo:</p>\r\n            </DialogContent>\r\n      </Dialog>\r\n    );\r\n  }\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      backgroundColor: '#37474f',\r\n      height: '100vh',\r\n    },\r\n    itemCard: {\r\n        color: 'white',\r\n        backgroundColor: '#263238',\r\n        textAlign: \"center\",\r\n        width: 250,\r\n    },\r\n    itemImage: {\r\n        height: 150,\r\n    },\r\n    dialogItem: {\r\n        padding: '0 30px',\r\n    },\r\n    closeButton: {\r\n        position: 'absolute',\r\n        right: theme.spacing(1),\r\n        top: theme.spacing(1),\r\n        color: theme.palette.grey[500],\r\n    },\r\n  }));\r\n\r\nexport default function Projetos() {\r\n    const classes = useStyles();\r\n    const [open, setOpen] = React.useState(false);\r\n    const [selectedValue, setSelectedValue] = React.useState([1]);\r\n  \r\n    const handleClickOpen = () => {\r\n      setOpen(true);\r\n    };\r\n  \r\n    const handleClose = (value) => {\r\n      setOpen(false);\r\n      setSelectedValue(value);\r\n    };\r\n\r\n    return (\r\n        <Container maxWidth=\"lg\" className={classes.root}>\r\n            <Box height={50}/>\r\n            <Grid conteiner spacing={2}>\r\n                <Grid item xs>\r\n                    <Grid container spacing={3} justifyContent=\"center\">\r\n                        <Grid item>\r\n                            <Card className={classes.itemCard}>\r\n                                <CardActionArea>\r\n                                    <CardMedia\r\n                                        className={classes.itemImage}\r\n                                        image={stickLogo}\r\n                                        title=\"StickRun logo\"\r\n                                        onClick={handleClickOpen}\r\n                                    />\r\n                                    <CardContent>\r\n                                        <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                                            Stick Run\r\n                                        </Typography>\r\n                                        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                                            Primeiro jogo completo\r\n                                        </Typography>\r\n                                    </CardContent>\r\n                                </CardActionArea>\r\n                                <SimpleDialog selectedValue={selectedValue} open={open} onClose={handleClose} />\r\n                            </Card>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Card className={classes.itemCard}>\r\n                                <CardActionArea>\r\n                                    <CardMedia\r\n                                        className={classes.itemImage}\r\n                                        //image={stickLogo}\r\n                                        title=\"StickRun logo\"\r\n                                    />\r\n                                    <CardContent>\r\n                                        <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                                            Vazio\r\n                                        </Typography>\r\n                                        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                                            -\r\n                                        </Typography>\r\n                                    </CardContent>\r\n                                </CardActionArea>\r\n                            </Card>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Card className={classes.itemCard}>\r\n                                <CardActionArea>\r\n                                    <CardMedia\r\n                                        className={classes.itemImage}\r\n                                        //image={stickLogo}\r\n                                        title=\"StickRun logo\"\r\n                                    />\r\n                                    <CardContent>\r\n                                        <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                                            Vazio\r\n                                        </Typography>\r\n                                        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                                            -\r\n                                        </Typography>\r\n                                    </CardContent>\r\n                                </CardActionArea>\r\n                            </Card>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </Container>\r\n    )\r\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport SwipeableViews from 'react-swipeable-views';\nimport { makeStyles, useTheme, createTheme, ThemeProvider } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport Home from './Conteiners/Home';\nimport Projetos from './Conteiners/Projetos';\n\nfunction TabPanel(props) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`full-width-tabpanel-${index}`}\n      aria-labelledby={`full-width-tab-${index}`}\n      {...other}\n    >\n      {value === index && (\n        <Box p={3}>\n          <Typography>{children}</Typography>\n        </Box>\n      )}\n    </div>\n  );\n}\n\nTabPanel.propTypes = {\n  children: PropTypes.node,\n  index: PropTypes.any.isRequired,\n  value: PropTypes.any.isRequired,\n};\n\nfunction a11yProps(index) {\n  return {\n    id: `full-width-tab-${index}`,\n    'aria-controls': `full-width-tabpanel-${index}`,\n  };\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    backgroundColor: '#263238'\n  },\n  titleFont: {\n    fontWeight: 'bold',\n    fontSize: 14,\n  },\n}));\n\nconst darkTheme = createTheme({\n  palette: {\n    type: 'dark',\n    primary: {\n      main: '#ffffff',\n    },\n    secondary: {\n      main: 'rgba(0, 0, 0, 0.54)',\n    },\n  },\n});\n\nexport default function FullWidthTabs() {\n  const classes = useStyles();\n  const theme = useTheme();\n  const [value, setValue] = React.useState(0);\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  const handleChangeIndex = (index) => {\n    setValue(index);\n  };\n\n  return (\n    <div className={classes.root}>\n      <ThemeProvider theme={darkTheme}>\n        <AppBar position=\"absolute\" color=\"default\">\n          <Tabs\n            value={value}\n            onChange={handleChange}\n            indicatorColor=\"primary\"\n            textColor=\"primary\"\n            variant=\"standart\"\n            aria-label=\"full width tabs example\"\n            centered\n          >\n            <Tab className={classes.titleFont} label=\"Home\" {...a11yProps(0)} />\n            <Tab className={classes.titleFont} label=\"Projetos\" {...a11yProps(1)} />\n            <Tab className={classes.titleFont} label=\"Portfólio\" {...a11yProps(2)} />\n          </Tabs>\n        </AppBar>\n        <SwipeableViews\n          axis={theme.direction === 'rtl' ? 'x-reverse' : 'x'}\n          index={value}\n          onChangeIndex={handleChangeIndex}\n        >\n          <TabPanel value={value} index={0} dir={theme.direction}>\n            <Home/>\n          </TabPanel>\n          <TabPanel value={value} index={1} dir={theme.direction}>\n            <Projetos/>\n          </TabPanel>\n          <TabPanel value={value} index={2} dir={theme.direction}>\n            Item Three\n          </TabPanel>\n        </SwipeableViews>\n      </ThemeProvider>\n    </div>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}